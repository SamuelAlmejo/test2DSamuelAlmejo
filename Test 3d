"""
Examen 3D
Samuel de Jesús Almejo Bautista
Num.Control: 18390583
Fecha: 27/01/2021
"""
#Importación de las bibliotecas requeridas para la elaboración del programa
import matplotlib.pyplot as plt 
import numpy as np
from math import ceil#Importar la función ceil que funciona para redondear los resultados de los calculos que se harán
#Importación de la función que nos ayudará a identificar la tecla Esc
from pynput import keyboard as kb 
#import Tkinter as tk
#Etiquetas de los nombres de los ejes y el título
plt.title('Examen 3D')
plt.xlabel('Eje X')
plt.ylabel('Eje Y')
#______Coordenadas iniciales
xg=[]
yg=[]
zg=[]

#Cordenadas centrales
xc=80
yc=40
zc=40

#Coordenadas locales
x=[40,30,80,0]
y=[60,10,60,0]
z=[0,0,0,0]
#____Plotear el sistema 
def plotPlaneLine(xg,yg,zg):
    plt.axis([80,250,130,2])
    plt.axis('on')
    plt.grid(False)
    plt.plot([xg[0],xg[1]],[yg[0],yg[1]],color='k')#plano
    plt.plot([xg[1],xg[2]],[yg[1],yg[2]],color='k')
    plt.plot([xg[2],xg[0]],[yg[2],yg[0]],color='k')

    #Punto 3
    plt.scatter(xg[3],yg[3],s=15,color='r')

    #Plot intersection triangles
    plt.plot([xg[0],xg[3]],[yg[0],yg[3]],color='r',linestyle=':')
    plt.plot([xg[1],xg[3]],[yg[1],yg[3]],color='r',linestyle=':')
    plt.plot([xg[2],xg[3]],[yg[2],yg[3]],color='r',linestyle=':')

    plt.show()

def hitPoint(x,y,z):
    #Distancias del Area A
    #Distancia entre el punto 0 a 1
    a=x[1]-x[0]
    b=y[1]-y[0]
    c=z[1]-z[0]
    Q01=np.sqrt(a*a+b*b+c*c) 
    #Distancia entre el punto 1 a 2
    a=x[2]-x[1]
    b=y[2]-y[1]
    c=z[2]-z[1]
    Q12=np.sqrt(a*a+b*b+c*c) 

    #Distancia entre el punto 0 a 2
    a=x[2]-x[0]
    b=y[2]-y[0]
    c=z[2]-z[0]
    Q02=np.sqrt(a*a+b*b+c*c)

    #Hitpoint del triángulo
    #Distancia entre el punto 1 a 3
    a=x[3]-x[1]
    b=y[3]-y[1]
    c=z[3]-z[1]
    Q13=np.sqrt(a*a+b*b+c*c)

    #Distancia entre el punto 2 a 3
    a=x[3]-x[2]
    b=y[3]-y[2]
    c=z[3]-z[2]
    Q23=np.sqrt(a*a+b*b+c*c)

    #Distancia entre el punto 0 a 3
    a=x[0]-x[3]
    b=y[0]-y[3]
    c=z[0]-z[3]
    Q03=np.sqrt(a*a+b*b+c*c)

    #Area del triángulo A
    s=(Q01+Q12+Q02)/2
    A=np.sqrt(s*(s-Q01)*(s-Q12)*(s-Q02))

    #Area del triángulo A1
    s1=(Q01+Q13+Q03)/2
    A1=np.sqrt(s1*(s1-Q01)*(s1-Q13)*(s1-Q03))

    #Area del triángulo A2
    s2=(Q03+Q23+Q03)/2
    A2=np.sqrt(s2*(s2-Q03)*(s2-Q23)*(s2-Q03))

    return A,A1,A2



def plotTriangleLine(xc,yc,zc):
    #Etiquetas para identificar las bases A, A1 y A2
    plt.text(130,70,'Área A',color='r')
    plt.text(120,80,'Área A1',color='k')
    plt.text(140,95,'Área A2',color='k')
    [A,A1,A2]=hitPoint(x,y,z)
    #Validación que muestra una etiqueta si está dentro o fuera el hitpoint
    if((A1+A2)>A):
        plt.text(200,85,'Está fuera del límite')
    elif((A1+A2)<A):
        plt.text(200,85,'Está dentro del límite')
    #Redondeo de las áreas
    A=ceil(A)
    A1=ceil(A1)
    A2=ceil(A2)
    A3=ceil(A1+A2)
    
    #Etiquetas del valor de las áreas al igual que la condición solicitada
    plt.text(200,60,'A=',color='k')
    plt.text(210,60,A,color='k')
    plt.text(200,65,'A1=',color='r')
    plt.text(210,65,A1,color='r')
    plt.text(200,70,'A2=',color='r')
    plt.text(210,70,A2,color='r')
    
    #Se efectúa la condición del ejercicio
    if((A1+A2)>A):
        plt.text(200,75,'A1+A2=',color=(.5,.2,.8))
        plt.text(220,75,A3,color=(.5,.2,.8))
    elif((A1+A2)<A):
        plt.text(200,75,'A1+A2=',color='g')
        plt.text(220,75,A3,color='g')

    plotPlaneLine(xg,yg,zg)

#Pedir al usuario que proporcione la coordenada del hitpoint
while True:
    axis=input('Proporcione la coordenada del HitPoint en el eje X. Pulse esc para salir: ')
    if axis=='esc':
        break
    else:
        x[3]=int(axis)
        axis=input('Proporcione la coordenada del HitPoint en el eje Y. Pulse esc para salir: ')
        if key == keyboard.Key.esc:
        # Stop listener
        return False
        else:
            y[3]=int(axis)

            for i in range(len(x)):
                xg.append( x[i]+xc )
                yg.append( y[i]+yc )
                zg.append( z[i]+zc )

            plotTriangleLine(xc,yc,zc)

